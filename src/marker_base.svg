<svg viewBox="-2 -2 4 4" xmlns="http://www.w3.org/2000/svg">
	<defs><!-- Hexagon and "Circle" used later, the group they're in has a transform
	so they can use mostly integer coordinates, cutting the total number of bytes
	down significantly when it comes to potentially having thousands or more of these -->
		<!-- for the sticker and stencil versions, the points must be specified floating
		point and then transformed to integer equivalents because the connectivity of the
		marker is done with strokes, which would otherwise be scaled asymmetrically with
		the transform. ID at the end because text compression reasons -->
		<polygon points="0,2 -1,1 -1,-1 0,-2 1,-1 1,1" id="H"/>
		<!-- this ellipse turns into a circle after transforming and is used to make the
		dark hexagons without having hairline gaps between them. It still leaves single
		pixel pin-pricks where 3 meet at a corner but I can live with that. This works
		because the circles overlap where simple hexagons wouldn't and would otherwise
		allow the mostly white background to show through. To hide the leftover curvature
		at the edges of the data region we redraw the corners over it. This item isn't
		neccessary for cutter versions because the gaps this hides are already covered by
		the stroke from always using the hexagon definition -->
		<ellipse id="C" rx="1.15470054" ry="2" fill="#FFF"/>
	</defs>
	<!-- we punch all of the white regions out of the circle using this mask in order to
	keep the default color un-assigned and thus stylable and allow whatever background
	color is behind it to show through this should allow for easy inverting to double
	your marker count if you ever have just not quite enough markers or some fancy color
	layering of multiple markers if you trust your camera's color accuracy and the
	lighting enough, however that could lead to inefficiencies and errors in decoding
	if not handled well, hence why I haven't implemented it -->
	<mask id="M">
		<!-- this allows the default circle to show through, in most examples this would
		be a rectangle but this is circular already and is shorter -->
		<circle r="2" fill="#FFF"/>
		<!-- compound scaling factor, that handles both the width scaling by 1.15470054
		and the overall scaling by 0.2 that is specific to the n=3 marker size. This
		allows for specifying coordinates precisely in the least possible characters.
		would also have a rotation tacked on after for n=6 marker size-->
		<g transform="scale(.346410162 .2)">
			<!-- the alignment triangle, must be sized for a given n value due to transrom -->
			<polygon points="0,10 -5,-5 5,-5"/>
			<!-- gap filler polygon that handles what would be black hairline gaps from
			portions of the data region that go beyond the bacground of the alignment
			triangle. Is dependent on the marker size but is not neccessary for cutter
			versions as the gaps are already masked by the stroke lines -->
			<polygon points="0,-6 -3,3 3,3"/>
			<!-- start of the data region, clear bits come first. If it's a cutter
			version, then all set bits are changed to using hexagons instead of circles
			and get wrapped in a group tag to set fill="#FFF" across all of them. -->
			<use href="#C" x="-1" y="-5"/>
			<use href="#C" x="1" y="-5"/>
			<use href="#C" y="-2"/><!-- 0 values can be ommitted as that's default behavior-->
			<use href="#C" x="2" y="-2"/>
			<use href="#C" x="3" y="1"/>
			<use href="#C" y="4"/>
			<!-- the set bits come now, they must come after the circles to overwrite the
			rouded edges of the circles -->
			<use href="#H" x="2" y="4"/>
			<use href="#H" x="1" y="1"/>
			<use href="#H" x="-2" y="4"/>
			<use href="#H" x="-3" y="1"/>
			<use href="#H" x="-1" y="1"/>
			<use href="#H" x="-2" y="-2"/>
			<!-- this punches off any black from the circles that extends out of the data
			region. It's done by redrawing the corners because masking the data region
			would lead to white hairline edges on black hexagons that extend past the 
			alignment triangle. It's not neccessary for cutter versions-->
			<g id="R">
				<!-- small savings by only defining half the points and reflecting, which
				doesn't work for n=6 since that size has a chiral outline benefit is so
				miniscule I'm considering removing the reflection and just defining all 3
				polygons -->
				<polygon points="0,10 0,6 1,5 1.5,5.5"/>
				<polygon points="5,-5 2,-5 2,-4 3,-3 3,-1 3.5,-.5"/>
			</g>
			<use href="#R" transform="scale(-1, 1)"/>
		</g>
		<!-- for cutter versions, connectivity fixes to stabilize the ring edge at the
		alignment triangle's points (sticker) or connect the triangle and data region
		to the outside better (stencil) go here most likely with lines. The reason it
		goes here instead of at the top is that improved outer edge connectivity might
		be beneficial for circle detection and 3D printing. Might also consider applying
		some kind of blur and threshold filter to take sharp corners off for machining
		purposes -->
	<!-- start of the constant footer, this never changes from here on-->
	</mask>
	<!-- the circle that everything gets punched out of -->
	<circle r="2" mask="url(#M)"/>
</svg>